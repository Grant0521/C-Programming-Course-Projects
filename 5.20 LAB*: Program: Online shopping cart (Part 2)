/*
This program extends the earlier "Online shopping cart (Part 1)" program. (Consider first saving your earlier program).

Step 1: Extend the ItemToPurchase class per the following specifications:
Parameterized constructor to assign item name, item description, item price, and item quantity (default values of 0). (1 pt)
Public member functions
SetDescription() mutator & GetDescription() accessor (2 pts)
PrintItemCost() - Outputs the item name followed by the quantity, price, and subtotal
PrintItemDescription() - Outputs the item name and description
Private data members
string itemDescription - Initialized in default constructor to "none"
Ex. of PrintItemCost() output:

Bottled Water 10 @ $1 = $10
Ex. of PrintItemDescription() output:

Bottled Water: Deer Park, 12 oz.
Step 2: Build three new files:
ShoppingCart.h - Class declaration
ShoppingCart.cpp - Class definition
main.cpp - main() function (Note: main()'s functionality differs from the previous program.)
Build the ShoppingCart class with the following specifications.

Default constructor
Parameterized constructor which takes the customer name and date as parameters (1 pt)
Private data members
string customerName - Initialized in default constructor to "none"
string currentDate - Initialized in default constructor to "January 1, 2016"
vector < ItemToPurchase > cartItems
Public member functions
GetCustomerName() accessor (1 pt)
GetDate() accessor (1 pt)
AddItem()
Adds an item to cartItems vector. Has parameter ItemToPurchase. Does not return anything.
RemoveItem()
Removes item from cartItems vector. Has a string (an item's name) parameter. Does not return anything.
If item name cannot be found, output a message: Item not found in cart. Nothing removed.
ModifyItem()
Modifies an item's description, price, and/or quantity. Has parameter ItemToPurchase. Does not return anything.
If item can be found (by name) in cart, check if parameter has default values for description, price, and quantity. If not, modify item in cart.
If item cannot be found (by name) in cart, output a message: Item not found in cart. Nothing modified.
GetNumItemsInCart() (2 pts)
Returns quantity of all items in cart. Has no parameters.
GetCostOfCart() (2 pts)
Determines and returns the total cost of items in cart. Has no parameters.
PrintTotal()
Outputs total of objects in cart.
If cart is empty, output a message: SHOPPING CART IS EMPTY
PrintDescriptions()
Outputs each item's description.
If cart is empty, output a message: SHOPPING CART IS EMPTY
Ex. of PrintTotal() output:

John Doe's Shopping Cart - February 1, 2016
Number of Items: 8

Nike Romaleos 2 @ $189 = $378
Chocolate Chips 5 @ $3 = $15
Powerbeats 2 Headphones 1 @ $128 = $128

Total: $521
Ex. of PrintDescriptions() output:

John Doe's Shopping Cart - February 1, 2016

Item Descriptions
Nike Romaleos: Volt color, Weightlifting shoes
Chocolate Chips: Semi-sweet
Powerbeats 2 Headphones: Bluetooth headphones
Step 3: In main(), prompt the user for a customer's name and today's date. Output the name and date. Create an object of type ShoppingCart. (1 pt)
Ex:

Enter customer's name:
John Doe
Enter today's date:
February 1, 2016

Customer name: John Doe
Today's date: February 1, 2016
Step 4: Implement the PrintMenu() function
PrintMenu() (3 pts)
Implement the PrintMenu() function. PrintMenu() has a ShoppingCart parameter, and outputs a menu of options to manipulate the shopping cart. Each option is represented by a single character. Build and output the menu within the function.
If the an invalid character is entered, continue to prompt for a valid choice. Call PrintMenu() in the main() function. Continue to execute the menu until the user enters 'q' to Quit.
Hint: Implement Quit before implementing other options.
Ex:

a - Add item to cart
d - Remove item from cart
c - Change item quantity
i - Output items' descriptions
o - Output shopping cart
q - Quit

Choose an option:
Step 5: Implement the menu options
Step 5a: Implement "Output shopping cart" menu option. (3 pts)

Ex:

OUTPUT SHOPPING CART
John Doe's Shopping Cart - February 1, 2016
Number of Items: 8

Nike Romaleos 2 @ $189 = $378
Chocolate Chips 5 @ $3 = $15
Powerbeats 2 Headphones 1 @ $128 = $128

Total: $521
Step 5b: Implement "Output items' descriptions" menu option. (2 pts)

Ex:

OUTPUT ITEMS' DESCRIPTIONS
John Doe's Shopping Cart - February 1, 2016

Item Descriptions
Nike Romaleos: Volt color, Weightlifting shoes
Chocolate Chips: Semi-sweet
Powerbeats 2 Headphones: Bluetooth headphones
Step 5c: Implement "Add item to cart" menu option. (3 pts)

Ex:

ADD ITEM TO CART
Enter the item name:
Nike Romaleos
Enter the item description:
Volt color, Weightlifting shoes
Enter the item price:
189
Enter the item quantity:
2
Step 5d: Implement "Remove item from cart" menu option. (4 pts)

Ex:

REMOVE ITEM FROM CART
Enter name of item to remove:
Chocolate Chips
Step 5e: Implement "Change item quantity" menu option. (5 pts)

Hint: Make new ItemToPurchase object before using ModifyItem() function.

Ex:

CHANGE ITEM QUANTITY
Enter the item name:
Nike Romaleos
Enter the new quantity:
3
/*



// main.cpp
#include <iostream>
#include <string>
#include <vector>
#include "ItemToPurchase.h"
#include "ShoppingCart.h"
using namespace std;

void PrintMenu(ShoppingCart cart);
void ExecuteMenu(char choice, ShoppingCart &cart);

int main() {
   string customerName;
   string currentDate;
   
   cout << "Enter customer's name:" << endl;
   getline(cin, customerName);
   cout << "Enter today's date:" << endl;
   getline(cin, currentDate);
   ShoppingCart cart(customerName, currentDate);

   cout << endl << "Customer name: " << cart.GetCustomerName() << endl;
   cout << "Today's date: " << cart.GetDate() << endl;
   
   PrintMenu(cart);
   
   return 0;
}

void PrintMenu(ShoppingCart cart) {
   char choice;
   int i = 0;
   cout << endl;
   cout << "MENU" << endl;
   cout << "a - Add item to cart" << endl;
   cout << "d - Remove item from cart" << endl;
   cout << "c - Change item quantity" << endl;
   cout << "i - Output items' descriptions" << endl;
   cout << "o - Output shopping cart" << endl;
   cout << "q - Quit" << endl << endl;
   
   cout << "Choose an option:";
   cin >> choice;
   cout << endl;
   while ((choice != 'q') && (i < 1)) {
      if ((choice == 'a') || (choice == 'd') || (choice == 'c') || (choice == 'i') || (choice == 'o')) {
         ExecuteMenu(choice, cart);
      }
      cout << "Choose an option:";
      cin >> choice;
      cout << endl;
      i += 1;
   }
   
   return;
}

void ExecuteMenu(char choice, ShoppingCart &cart) {
   string itemName;
   string itemDescription;
   int itemPrice;
   int itemQuantity;
   
   if (choice == 'a') {
      cin.ignore();
      
      cout << "ADD ITEM TO CART" << endl;
      cout << "Enter the item name:" << endl;
      getline(cin, itemName);
      cout << "Enter the item description:" << endl;
      getline(cin, itemDescription);
      cout << "Enter the item price:" << endl;
      cin >> itemPrice;
      cout << "Enter the item quantity:" << endl;
      cin >> itemQuantity;
        
      ItemToPurchase item(itemName, itemDescription, itemPrice, itemQuantity);
      cart.AddItem(item);   
   } 
   else if (choice == 'd') {
      cin.ignore();
         
      cout << "REMOVE ITEM FROM CART" << endl;
      cout << "Enter name of item to remove:" << endl;
      getline(cin, itemName);
      cart.RemoveItem(itemName);
   } 
   else if (choice == 'c') {
      ItemToPurchase newItem;
      
      cin.ignore();
         
      cout << "CHANGE ITEM QUANTITY" << endl;
      cout << "Enter the item name:" << endl;
      getline(cin, itemName);
      cout << "Enter the new quantity:" << endl;
      cin >> itemQuantity;
         
      newItem.SetName(itemName);
      newItem.SetQuantity(itemQuantity);
      cart.ModifyItem(newItem);
   } 
   else if (choice == 'i') {
      cout << endl << "OUTPUT ITEMS' DESCRIPTIONS" << endl;
      cart.PrintDescriptions();
   } 
   else if (choice == 'o') {
      cout << "OUTPUT SHOPPING CART" << endl;
      cart.PrintTotal();
   }
  
   PrintMenu(cart);
   
   return;
}



// ShoppingCart.cpp
#include <iostream>
#include <string>
#include <vector>
#include "ShoppingCart.h"
#include "ItemToPurchase.h"
using namespace std;

ShoppingCart::ShoppingCart() {
   customerName = "none";
   currentDate = "January 1, 2016";

   return;
}

ShoppingCart::ShoppingCart(string customerName, string currentDate) {
   this->customerName = customerName;
   this->currentDate = currentDate;

   return;
}

string ShoppingCart::GetCustomerName() const {
   return customerName;
}

string ShoppingCart::GetDate() const {
   return currentDate;
}

void ShoppingCart::AddItem(ItemToPurchase item) {
   cartItems.push_back(item);
   
   return;
}

void ShoppingCart::RemoveItem(string itemName) {
   bool found = false;
   
   for (int i = 0; i < cartItems.size(); ++i) {
      if ((cartItems.at(i).GetName() == itemName) && (!found)) {
         cartItems.erase(cartItems.begin() + i);
         found = true;
      }
   }
   
   if (!found) {
      cout << "Item not found in cart. Nothing removed." << endl;
   }
   
   return;
}

void ShoppingCart::ModifyItem(ItemToPurchase item) {
   bool found = false;
     
   for (int i = 0; i < cartItems.size(); ++i) {
      string name = cartItems.at(i).GetName();
      string description = cartItems.at(i).GetDescription();
      int price = cartItems.at(i).GetPrice();
      int quantity = cartItems.at(i).GetQuantity();
   
      if ((!found) && (name == item.GetName())) {
         if ((description != "none") && (price != 0) && (quantity != 0)) {
         item.SetName(name);
         item.SetDescription(description);
         item.SetPrice(price);
           
         cartItems.at(i) = item;
         found = true;
         }
      }
   }

   if (!found) {
   cout << "Item not found in cart. Nothing modified." << endl;
   }

return;
}

int ShoppingCart::GetNumItemsInCart() const {
   int sum = 0;
   
   for (int i = 0; i < cartItems.size(); ++i) {
      sum += cartItems.at(i).GetQuantity();
   }
   
   return sum;
}
   
int ShoppingCart::GetCostOfCart() const {
   int sum = 0;
   int price;
   int quantity;
   
   for (int i = 0; i < cartItems.size(); ++i) {
      price = cartItems.at(i).GetPrice();
      quantity = cartItems.at(i).GetQuantity();
      
      sum += (price * quantity);
   }
   
   return sum;
}

void ShoppingCart::PrintTotal() const {
   string name;
   int price;
   int quantity;
   int totalPrice;
   int total = 0;
   
   cout << customerName << "'s Shopping Cart - " << currentDate << endl;
   cout << "Number of Items: " << GetNumItemsInCart() << endl << endl;
   
   if (cartItems.size() == 0) {
      cout << "SHOPPING CART IS EMPTY" << endl;
   } 
   else {
      for (int i = 0; i < cartItems.size(); ++i) {
         name = cartItems.at(i).GetName();
         price = cartItems.at(i).GetPrice();
         quantity = cartItems.at(i).GetQuantity();
         totalPrice = price * quantity;
         
         cout << name << " " << quantity << " @ $" << price << " = $" << totalPrice << endl;
         
         total += totalPrice;
      }
   }
   
   cout << endl << "Total: $" << total << endl;
   
   return;
}

void ShoppingCart::PrintDescriptions() const {
   cout << customerName << "'s Shopping Cart - " << currentDate << endl << endl;
   cout << "Item Descriptions" << endl;
   
   for (int i = 0; i < cartItems.size(); ++i) {
      cout << cartItems.at(i).GetName() << ": " << cartItems.at(i).GetDescription() << endl;
      }
      
   return;
}



// ShoppingCart.h
#ifndef SHOPPINGCART_H
#define SHOPPINGCART_H

#include <string>
#include <vector>
#include "ItemToPurchase.h"
using namespace std;

class ShoppingCart {
   public:
      ShoppingCart();
      ShoppingCart(string customerName, string currentDate);
      string GetCustomerName() const;
      string GetDate() const;
      void AddItem(ItemToPurchase item);
      void RemoveItem(string itemName);
      void ModifyItem(ItemToPurchase item);
      int GetNumItemsInCart() const;
      int GetCostOfCart() const;
      void PrintTotal() const;
      void PrintDescriptions() const;

   private:
      string customerName;
      string currentDate;
      vector<ItemToPurchase> cartItems;
};

#endif



// ItemToPurchase.cpp
#include <iostream>
#include <string>
#include "ItemToPurchase.h"
using namespace std;

ItemToPurchase::ItemToPurchase() {
   itemName = "none";
   itemDescription = "none";
   itemPrice = 0;
   itemQuantity = 0;

   return;
}

ItemToPurchase::ItemToPurchase(string name, string description, int price, int quantity) {
   itemName = name;
   itemDescription = description;
   itemPrice = price;
   itemQuantity = quantity;
   
   return;
}

void ItemToPurchase::SetName(string name) {
   itemName = name;
   
   return;
}

string ItemToPurchase::GetName() const {
   return itemName;
}

void ItemToPurchase::SetDescription(string description) {
   itemDescription = description;
   
   return;
}

string ItemToPurchase::GetDescription() const {
   return itemDescription;
}

void ItemToPurchase::SetPrice(int price) {
   itemPrice = price;

   return;
}

int ItemToPurchase::GetPrice() const {
   return itemPrice;
}

void ItemToPurchase::SetQuantity(int quantity) {
   itemQuantity = quantity;
   
   return;
}

int ItemToPurchase::GetQuantity() const {
   return itemQuantity;
}

void ItemToPurchase::PrintItemCost() const {
   cout << itemName << " " << itemQuantity << " @ $" << itemPrice << " = $" << itemQuantity * itemPrice << endl;

   return;
}

void ItemToPurchase::PrintItemDescription() const {
   cout << itemName << ": " << itemDescription << endl;

   return;
}



// ItemToPurchase.h
#ifndef ITEMTOPURCHASE_H
#define ITEMTOPURCHASE_H

#include <string>
using namespace std;

class ItemToPurchase {
   public:
      ItemToPurchase();
      ItemToPurchase(string name, string description, int price = 0, int quantity = 0);
      void SetName(string description);
      string GetName() const;
      void SetDescription(string name);
      string GetDescription() const;
      void SetPrice(int price);
      int GetPrice() const;
      void SetQuantity(int quantity);
      int GetQuantity() const;
      void PrintItemCost() const;
      void PrintItemDescription() const;
  
   private:
      string itemName;
      string itemDescription;
      int itemPrice;
      int itemQuantity;
};

#endif
