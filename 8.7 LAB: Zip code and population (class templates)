/* 
Define a class StatePair with two template types (T1 and T2), constructors, mutators, accessors, and a PrintInfo() method. Three vectors have been pre-filled with StatePair data in main():

vector<StatePair <int, string>> zipCodeState: ZIP code - state abbreviation pairs
vector<StatePair<string, string>> abbrevState: state abbreviation - state name pairs
vector<StatePair<string, int>> statePopulation: state name - population pairs
Complete main() to use an input ZIP code to retrieve the correct state abbreviation from the vector zipCodeState. Then use the state abbreviation to retrieve the state name from the vector abbrevState. Lastly, use the state name to retrieve the correct state name/population pair from the vector statePopulation and output the pair.

Ex: If the input is:

21044
the output is:

Maryland: 6079602
*/



// main.cpp
#include<iostream>

#include <fstream>

#include <vector>

#include <string>

#include "StatePair.h"

using namespace std;

int main() {

ifstream inFS; // File input stream

int zip;

int population;

string abbrev;

string state;

unsigned int i;

// ZIP code - state abbrev. pairs

vector<StatePair <int, string>> zipCodeState;

// state abbrev. - state name pairs

vector<StatePair<string, string>> abbrevState;

// state name - population pairs

vector<StatePair<string, int>> statePopulation;

// Fill the three ArrayLists

// Try to open zip_code_state.txt file

inFS.open("zip_code_state.txt");

if (!inFS.is_open()) {

cout << "Could not open file zip_code_state.txt." << endl;

return 1; // 1 indicates error

}

while (!inFS.eof()) {

StatePair <int, string> temp;

inFS >> zip;

if (!inFS.fail()) {

temp.SetKey(zip);

}

inFS >> abbrev;

if (!inFS.fail()) {

temp.SetValue(abbrev);

}

zipCodeState.push_back(temp);

}

inFS.close();

// Try to open abbreviation_state.txt file

inFS.open("abbreviation_state.txt");

if (!inFS.is_open()) {

cout << "Could not open file abbreviation_state.txt." << endl;

return 1; // 1 indicates error

}

while (!inFS.eof()) {

StatePair <string, string> temp;

inFS >> abbrev;

if (!inFS.fail()) {

temp.SetKey(abbrev);

}

getline(inFS, state); //flushes endline

getline(inFS, state);

state = state.substr(0, state.size()-1);

if (!inFS.fail()) {

temp.SetValue(state);

}

abbrevState.push_back(temp);

}

inFS.close();

// Try to open state_population.txt file

inFS.open("state_population.txt");

if (!inFS.is_open()) {

cout << "Could not open file state_population.txt." << endl;

return 1; // 1 indicates error

}

while (!inFS.eof()) {

StatePair <string, int> temp;

getline(inFS, state);

state = state.substr(0, state.size()-1);

if (!inFS.fail()) {

temp.SetKey(state);

}

inFS >> population;

if (!inFS.fail()) {

temp.SetValue(population);

}

getline(inFS, state); //flushes endline

statePopulation.push_back(temp);

}

inFS.close();

cin >> zip;

string abbre;
string stateName;
for (i = 0; i < zipCodeState.size(); ++i) {
// TODO: Using ZIP code, find state abbreviation
if(zipCodeState[i].GetKey()==zip)
{
//save abbreviation
abbre=zipCodeState[i].GetValue();
}
}


for (i = 0; i < abbrevState.size(); ++i) {
// TODO: Using state abbreviation, find state name
if(abbrevState[i].GetKey()==abbre)
{
//save the state
state = abbrevState[i].GetValue();
}
}


for (i = 0; i < statePopulation.size(); ++i) {
// TODO: Using state name, find population. Print pair info.
if(statePopulation[i].GetKey()==state)
{
//print the pair
statePopulation[i].PrintInfo();
}
}

}



// statePair.h
#ifndef STATEPAIR
#define STATEPAIR
#include<iostream>
using namespace std;
template<typename T1, typename T2>
class StatePair {
T1 type1;
T2 type2;
public:
//constructor
StatePair()
{

}
StatePair(T1 type1,T2 type2)
{
this->type1=type1;
this->type2=type2;
}
//access and mutator
T1 GetKey()
{
type1;
}
T2 GetValue()
{
type2;
}
void SetKey(T1 x)
{
type1=x;
}
void SetValue(T2 x)
{
type2=x;
}
void PrintInfo()
{
cout<<type1<<": "<<type2<<endl;
}

// TODO: Define a constructor, mutators, and accessors
// for StatePair

// TODO: Define PrintInfo() method
};

#endif
