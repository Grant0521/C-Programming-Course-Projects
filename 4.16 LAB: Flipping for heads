/*
Given main() and GVCoin class, complete function CountHeads() in main.cpp that counts and returns the number of flips taken to achieve a desired number of heads. Function CountHeads() has a GVCoin object and an integer representing the desired number of heads as parameters. Review the definition of "GVCoin.cpp" by clicking on the orange arrow.

Note: For testing purposes, a GVCoin object is created in the main() function using a pseudo-random number generator with a fixed seed value. The program uses a seed value of 15 during development, but when submitted, a different seed value will be used for each test case.

Ex: If the GVCoin object is created with a seed value of 15 and the desired number of heads is 20, then the function CountHeads() returns 40 and the program outputs:

Total number of flips for 20 heads: 40
*/

// Main.cpp
#include <iostream>

#include "GVCoin.h"
using namespace std;

int CountHeads(GVCoin c, int goal) {   
   while (c.NumHeads() < goal) {
      c.Flip();
   }
   return c.NumFlips();
}

int main() {
	GVCoin c = GVCoin(15); // Create a GVCoin object with seed value 15
	int numHeads = 20;   // Desire 20 heads
	int numFlips = CountHeads(c, numHeads);   // Should return 40 using GVCoin object with seed value 15
	cout << "Total number of flips for 20 heads: " << numFlips << endl;

   c = GVCoin(15);
	numHeads = 100;   // Desire 100 heads
	numFlips = CountHeads(c, numHeads);   // Should return 194 using GVCoin object with seed value 15
	cout << "Total number of flips for 100 heads: " << numFlips << endl;
}



// GVCoin.cpp
#include <iostream>
#include <string>

#include "GVCoin.h"
using namespace std;

GVCoin::GVCoin(int seed) {
	heads = 0;
	flips = 0;
	isHeads = true;
	SetSeed(seed);
}

void GVCoin::Flip() {
	int random = rand() % 2;
	if (random == 1) {
		isHeads = true;
	}
	else {
		isHeads = false;
	}
	flips++;  // Increment flip count
	if(isHeads) {
		heads++; // Increment heads count if current flip results in heads
	}
}

int GVCoin::NumFlips() {
	return flips;
}

int GVCoin::NumHeads() {
	return heads;
}

// set the random number generator seed for testing
void GVCoin::SetSeed(int seed) {
	srand(seed);
}



// GVCoin.h
#ifndef GVCOIN_H_
#define GVCOIN_H_

#include <iostream>
using namespace std;

class GVCoin {
    public:
		GVCoin(int seed);
		void Flip();
		int NumFlips();
		int NumHeads();
		void SetSeed(int seed);

    private:
		bool isHeads;
        int flips;
        int heads;
};

#endif /* GVCOIN_H_ */
